// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: manege_v2.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationServiceV2_NotificationStream_FullMethodName = "/manege.NotificationServiceV2/NotificationStream"
)

// NotificationServiceV2Client is the client API for NotificationServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceV2Client interface {
	NotificationStream(ctx context.Context, in *NotificationRequestV2, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotificationResponseV2], error)
}

type notificationServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceV2Client(cc grpc.ClientConnInterface) NotificationServiceV2Client {
	return &notificationServiceV2Client{cc}
}

func (c *notificationServiceV2Client) NotificationStream(ctx context.Context, in *NotificationRequestV2, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotificationResponseV2], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificationServiceV2_ServiceDesc.Streams[0], NotificationServiceV2_NotificationStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotificationRequestV2, NotificationResponseV2]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationServiceV2_NotificationStreamClient = grpc.ServerStreamingClient[NotificationResponseV2]

// NotificationServiceV2Server is the server API for NotificationServiceV2 service.
// All implementations must embed UnimplementedNotificationServiceV2Server
// for forward compatibility.
type NotificationServiceV2Server interface {
	NotificationStream(*NotificationRequestV2, grpc.ServerStreamingServer[NotificationResponseV2]) error
	mustEmbedUnimplementedNotificationServiceV2Server()
}

// UnimplementedNotificationServiceV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceV2Server struct{}

func (UnimplementedNotificationServiceV2Server) NotificationStream(*NotificationRequestV2, grpc.ServerStreamingServer[NotificationResponseV2]) error {
	return status.Errorf(codes.Unimplemented, "method NotificationStream not implemented")
}
func (UnimplementedNotificationServiceV2Server) mustEmbedUnimplementedNotificationServiceV2Server() {}
func (UnimplementedNotificationServiceV2Server) testEmbeddedByValue()                               {}

// UnsafeNotificationServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceV2Server will
// result in compilation errors.
type UnsafeNotificationServiceV2Server interface {
	mustEmbedUnimplementedNotificationServiceV2Server()
}

func RegisterNotificationServiceV2Server(s grpc.ServiceRegistrar, srv NotificationServiceV2Server) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationServiceV2_ServiceDesc, srv)
}

func _NotificationServiceV2_NotificationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationRequestV2)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceV2Server).NotificationStream(m, &grpc.GenericServerStream[NotificationRequestV2, NotificationResponseV2]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificationServiceV2_NotificationStreamServer = grpc.ServerStreamingServer[NotificationResponseV2]

// NotificationServiceV2_ServiceDesc is the grpc.ServiceDesc for NotificationServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manege.NotificationServiceV2",
	HandlerType: (*NotificationServiceV2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotificationStream",
			Handler:       _NotificationServiceV2_NotificationStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manege_v2.proto",
}
